package sprint7.Final;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

/*
ID 59024567

-- ПРИНЦИП РАБОТЫ --
    Проблема может быть решена с помощью динамического программирования, когда сумма элементов не слишком велика.
    Мы можем создать 2D-массив [][] размером (sum / 2 + 1) * (n + 1).
    И мы можем построить решение снизу вверх так, чтобы каждая заполненная запись имела следующее свойство:
    part [i] [j] = true, если подмножество {arr [0], arr [1], ..arr [j-1]} имеет сумму == i, иначе ложь

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
    Пусть DP(mask, i) будет набором только тех подмножеств маски, которые отличаются первыми i-битами (начиная с нуля справа).
    Например, пусть mask будет 10110101 в двоичном формате, а i будет 3, чем те подмножества, которые отличаются в
    первых i битах (начиная с нуля справа).

    Мы найдем повторяющиеся маски, первые биты которых будут одинаковыми, после чего будут сформированы те же побитовые
    подмножества. Мы можем запоминать, чтобы получить предыдущие результаты и значительно сократить количество шагов.

    Будем считать, что i-й бит равен 0 , тогда никакое подмножество не может отличаться от маски в i-м бите,
    поскольку это будет означать, что числа будут иметь 1 в i-м бите, где маска имеет 0, что будет означать
    что это не подмножество маски. Таким образом, мы заключаем, что числа теперь отличаются только по первым
    (i-1) битам. Следовательно,

    Теперь во втором случае, если i-й бит равен 1, его можно разделить на два непересекающихся набора.
    Один содержит числа с i-тым битом, равным 1, и отличается от маски в следующих (i-1) битах.
    Второй содержит числа с битом i, равным 0 и отличным от маски (2 ^ i) в следующих (i-1) битах.

    Следовательно, приведенная выше диаграмма объясняет, как мы можем связать наборы DP (mask, i) друг с другом.
    Маска представлена в двоичном виде и разделена знаком «.» С i. Элементами любого набора DP (mask, i)
    являются листья в его поддереве. Красно-синие префиксы показывают, что эта часть маски будет общей для
    всех ее членов / дочерних элементов, тогда как красной части маски разрешено различаться.

    Глядя на корневое дерево, мы можем выяснить, что для одного и того же значения i оно может иметь другое значение маски.

    Следовательно, два рекуррентных отношения:
    When i-th bit is off:
      1. DP(mask, i) = DP(mask, i-1)

    When i-th bit is on:
      2. DP(mask, i) = DP(mask, i-1) U DP(mask2i, i-1).

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
    O(factorial(n) / 2) ^ 2

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
    O(sum(1..n) / 2)

 */
public class Two {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = getReader();

        int size = Integer.parseInt(reader.readLine());
        int[] arr = getArray(reader, size);

        if (findPartition(arr, size))
            System.out.println("True");
        else
            System.out.println("False");

    }

    // Возвращает истину, если arr[] можно разделить на две части
    // подмножества с одинаковой суммой, иначе false
    static boolean findPartition(int[] arr, int n) {
        int sum = 0;
        int i, j;

        // Вычислить сумму всех элементов
        for (i = 0; i < n; i++)
            sum += arr[i];

        if (sum % 2 != 0)
            return false;

        boolean[][] part = new boolean[sum / 2 + 1][n + 1];

        // инициализируем верхнюю строку как истину
        for (i = 0; i <= n; i++)
            part[0][i] = true;

        // инициализируем крайний левый столбец, кроме части [0] [0], как 0
        for (i = 1; i <= sum / 2; i++)
            part[i][0] = false;

        // Заполняем таблицу разделов снизу вверх
        for (i = 1; i <= sum / 2; i++) {
            for (j = 1; j <= n; j++) {
                part[i][j] = part[i][j - 1];
                if (i >= arr[j - 1])
                    part[i][j] = part[i][j] || part[i - arr[j - 1]][j - 1];
            }
        }

        return part[sum / 2][n];
    }

    private static int[] getArray(BufferedReader reader, int size) throws IOException {
        StringTokenizer tokenizer = new StringTokenizer(reader.readLine());
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = Integer.parseInt(tokenizer.nextToken());
        }
        return arr;
    }

    private static BufferedReader getReader() {
        return new BufferedReader(new InputStreamReader(System.in));
    }
}